<% content_for :navbar do %>
  <ul class="navbar-nav mr-auto">
    <li class="nav-item">
      <%= link_to " Back", teacher_lectures_path(@lecture.teacher, school_class_id: @lecture.school_class), class: "btn btn-primary mdi mdi-arrow-left", id: "back-to-teacher"%>
    </li>
  </ul>
  <span class="navbar-brand"><%= @lecture.name %></span>
<% end %>

<div class="row">
  <div class="col-xs-12 col-md-3" style="border-right: solid 2px #74a4b5; box-shadow: 5px 0 5px -5px #555;">
    <div class="col-sm">
      <h3>School Class: <%= @lecture.school_class.class_to_s %></h3>
    </div>
    <div class="col-sm">
      <h3>Subject: <%= @lecture.subject %></h3>
    </div>
    <div class="col-sm">
      <h3>Date: <%= @lecture.date %></h3>
    </div>
    <br>
    <%= form_with(model: @lecture, id: "topics-edit") do |f| %>
      <div class="col-md-12">
        <%= f.text_area :topics, required: '' %>
      </div>

      <div class="row">
        <div class="col-md-3"></div>
        <div class="col-md-6">
          <br>
          <%= f.submit "Update Topics", id: "submit-topics-edit", disabled: "disabled", class: "btn btn-primary" %>
        </div>
      </div>
    <% end %>
  </div>
  <div class="col-xs-12 col-md-9">
    <ul class="nav nav-tabs" id="nav-tab-lecture" role="tablist">
      <li class="nav-item">
        <a class="nav-link active" id="nav-attendance-tab" data-toggle="tab" href="#nav-attendance" role="tab" aria-controls="nav-attendance" aria-selected="true">Students' attendance</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" id="nav-marks-tab" data-toggle="tab" href="#nav-marks" role="tab" aria-controls="nav-marks" aria-selected="true">Marks</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" id="nav-assignments-tab" data-toggle="tab" href="#nav-assignments" role="tab" aria-controls="nav-assignments" aria-selected="true">Assignments</a>
      </li>
    </ul>

    <div class="tab-content" id="pills-tabContent">
      <div class="tab-pane fade show active" id="nav-attendance" role="tabpanel" aria-labelledby="nav-attendance-tab">
        <br>
        <table id="attendances" class="table table-striped table-sm" style="table-layout: fixed;">
          <caption></caption>
          <thead>
          <tr>
            <th scope="col">Student</th>
            <th scope="col">Attendance</th>
          </tr>
          </thead>
          <tbody id="attendances-body">
          <%= render partial: 'attendances/attendance', collection: @lecture.school_class.attendances(@lecture.start_time).sort_by{ |a| a[:student_name] } %>
          </tbody>
        </table>
        <div>
          <button class="btn btn-success" id="submit-attendances" disabled onclick="update_attendances()">Send Data</button>
        </div>
      </div>
      <div class="tab-pane fade" id="nav-marks" role="tabpanel" aria-labelledby="nav-marks-tab">
        <br>
        <%= link_to ' Add mark', new_mark_path(params: { school_class_id: @lecture.school_class, teacher_id: @lecture.teacher }), {remote: true, 'data-toggle' =>  "modal", 'data-target' => '#mark-modal', class: 'btn btn-primary mdi mdi-plus-circle', id: 'new_mark_lecture'}  %>
        <br>
        <div style="overflow: auto">
        <table id="marks" class="table table-striped table-sm">
          <caption></caption>
          <thead>
          <tr>
            <th scope="col">Teacher</th>
            <th scope="col">Mark</th>
            <th scope="col">Subject</th>
            <th scope="col">Student</th>
            <th scope="col">Mark date</th>
            <th scope="col">Notes</th>
            <th scope="col"></th>
            <th scope="col"></th>
          </tr>
          </thead>
          <tbody id="marks-body">
          <%= render partial: 'marks/mark', collection: @lecture.teacher.marks.sort_by(&:date) %>
          </tbody>
        </table>
        </div>
      </div>
      <div class="tab-pane fade" id="nav-assignments" role="tabpanel" aria-labelledby="nav-assignments-tab">
        <br>
        <%= link_to " Add Assignments", new_assignment_path(params: { school_class_id: @lecture.school_class, teacher_id: @lecture.teacher, lecture_id: @lecture.id }),
                    {remote: true, 'data-toggle' => "modal", 'data-target' => '#assignment-modal', class: 'btn btn-primary mdi mdi-plus-circle', id: 'new_assignment_lecture'} %>
        <br>
        <div style="overflow: auto">
        <table id="assignments" class="table table-striped table-sm">
          <caption></caption>
          <thead>
          <tr>
            <th scope="col" style="width: 15%">Name</th>
            <th scope="col" style="width: 17%">Expiry Date</th>
            <th scope="col" style="width: 18%">Subject</th>
            <th scope="col" style="width: 17%">School Class</th>
            <th scope="col" style="width: 17%">Teacher</th>
            <th scope="col" style="width: 17%">Lecture</th>
            <th scope="col" style="width: 10%"></th>
            <th scope="col" style="width: 10%"></th>
            <th scope="col" style="width: 10%"></th>
          </tr>
          </thead>
          <tbody id="assignments-body">
          <%= render partial: 'assignments/assignment', collection: @lecture.teacher.assignments.where('expiry_date > ?', @lecture.start_time).where(subject: @lecture.subject).sort_by(&:expiry_date) %>
          </tbody>
        </table>
        </div>
      </div>
    </div>
  </div>
</div>

<%= render partial: 'marks/modal_form' %>
<%= render partial: 'assignments/modal_form' %>
<%= render partial: 'assignments/modal_show' %>
<%= render partial: 'lectures/modal_error' %>

<script type="text/javascript">
    var togglePressed = false;
    var toggleID;
    var timeChanged = false;
    var previousState;
    var closedPressed = false;
    var students_ids = {
        absents: [],
        late: [],
        early: []
    };

function execute() {
    $('input[type=checkbox][data-toggle^=toggle]').bootstrapToggle(); // all checkbox are transformed into toggles
    $('[data-toggle="popover"]:not([disabled]):not(.disabled)').popover( // all clicks on toggle elements trigger the creation of a popover
        {
            html: true, // the text inside a popover is written in HTML
            container: 'body', // responsive when window is resizing
            sanitize: false, // avoid problems for HTML text
        }
    );

    $('[data-toggle="popover"]:not(.disabled)').click(function (e) { // whenever the user clicks on a 'data-toggle' element
        if( e.target.parentElement.parentElement.children[0].classList.contains('disabled') ) { // if the input tag is disabled
            return; // don't react to clicks
        }
        let elementToBeChecked = e.target; // get the element clicked
        elementToBeChecked.classList.contains('toggle-on') ? previousState = true : previousState = false; // save provious state in case the user changes his/her mind by pressing x button in popover

        let buttonID = elementToBeChecked.parentElement.parentElement.children[0].id; // retrieve studentID related to the pressed toggle

        if ($('[absence-button="true"][id=' + buttonID + ']')[0] !== undefined) { // if the popover shows an "Absent" button (because the toggle was moved from Present to Absent state)
            $('[absence-button="true"][id=' + buttonID + ']')[0].onclick = function () { // when the user clicks on "Absent" button
                $('[data-toggle="popover"]').popover('hide'); // hide the popover
                let studentName = $('td#' + buttonID)[0].innerHTML; // retrieve student name
                let tooltip = document.createElement('a'); // create a tooltip icon
                tooltip.setAttribute('data-toggle', 'tooltip');
                tooltip.setAttribute('data-placement', 'right');
                tooltip.setAttribute('title', '' + studentName + ' was absent since the first hour'); // set tooltip text to be shown
                let infoIcon = document.createElement('i');
                infoIcon.classList = "fa fa-info-circle"; // create info icon
                let infoButton = document.createElement('button').appendChild(infoIcon);
                tooltip.appendChild(infoButton);
                $('[data-toggle="popover"][id=' + buttonID + ']')[0].parentElement.appendChild(tooltip);
                $('[data-toggle="popover"][id=' + buttonID + ']')[0].setAttribute('toggled', 'true'); // save the information about toggle state being changed

                $('#submit-attendances').prop("disabled", false); // enable "Send data" button

                $('[data-toggle="tooltip"]').tooltip( // all mouse hovers on info icon trigger a tooltip
                    {
                        container: 'body', // responsive when window is resizing
                    }
                );

                $('[data-toggle="popover"][id=' + buttonID + ']').popover('disable'); // disable popover on the toggle, so that if the user clicks again on the toggle
                                                                                      // it will simply return in original state (see later lines 189+)
                students_ids['absents'].push(buttonID); // add studentID in absent array

                togglePressed = timeChanged = closedPressed = false; // restore initial values for system state
                toggleID = -1;
            }
        }

        if (elementToBeChecked.parentElement.parentElement.parentElement.getAttribute('toggled') == "true") { // when the user clicks on a toggle that had already been clicked
            let id = elementToBeChecked.parentElement.parentElement.parentElement.id; // retrieve studentID related to the pressed toggle
            if (elementToBeChecked.classList.contains('toggle-on')) { // if the toggle has become on (and thus if, before pressing it, it was false) (it's just a matter of attributes, in the UI it is still off)
                $('input[type="checkbox"][id=' + id + ']').prop('checked', true).change(); // toggle it into "Present" state
                students_ids['late'].splice(students_ids['late'].indexOf(id), 1); // remove from the late students array
            } else if (elementToBeChecked.classList.contains('toggle-off')) { // if the toggle has become off (and thus if, before pressing it, it was true) (it's just a matter of attributes, in the UI it is still on)
                $('input[type="checkbox"][id=' + id + ']').prop('checked', false).change(); // toggle it into "Absent" state
                students_ids['early'].splice(students_ids['early'].indexOf(id), 1); // remove from the early students array
            }

            let tooltip = elementToBeChecked.parentElement.parentElement.parentElement.parentElement.children[1]; // retrieve the tooltip element
            elementToBeChecked.parentElement.parentElement.parentElement.parentElement.removeChild(tooltip); // remove the tooltip

            elementToBeChecked.parentElement.parentElement.parentElement.removeAttribute('toggled'); // remove information about toggle state being changed since now it's in the original state
            $('[data-toggle="popover"][id=' + id + ']').popover('enable'); // enable popover again

            if ($('.fa-info-circle').length == 0) { // if there are no changes from the original page after this update
                $('#submit-attendances').prop("disabled", true); // disable "Send data" button
            }

            return; // don't execute next lines
        }

        if (togglePressed == true && buttonID == toggleID) { // if the user clicks on a toggle after having clicked on the same toggle
            $('[data-toggle="popover"]').popover('hide'); // hide the popover
            togglePressed = false; // restore initial values for system state
            toggleID = -1;
            timeChanged = false;
        } else { // if the user clicks on a toggle
            togglePressed = true; // change system state accordingly
        }

        toggleID = e.target.parentElement.parentElement.parentElement.id; // retrieve studentID related to the pressed toggle

        $('input[type="time"]').change(function () { // when the user inserts data about entrance time or exit time
            timeChanged = true; // change system state accordingly
        });
    });

    $(document).click(function (e) { // whenever the user clicks on the page
        if (!togglePressed) { // if there's no toggle pressed
            return; // don't do anything
        }

        if (($('[data-toggle="popover"]').has(e.target).length == 0) && ($('[role="tooltip"]').has(e.target).length == 0)) { // if the click was not on a toggle nor on the related popover
            // (so he/she wants the popover to disappear and save the changes)
            if (timeChanged == true) { // if the user has inserted data about time entrance or time exit
                $('[data-toggle="popover"]').popover('hide'); // allow popover hiding
            }
            else if(togglePressed == false) {
                // ignore click because togglePressed = false
            }
            else { // otherwise
                $('#lecture-error-modal').modal('show'); // don't allow popover hiding and show error modal page
            }
        } else if ($(e.target).is('.close')) { // if the click was on the x icon in the top right corner of the popover
            let id = e.target.id; // retrieve studentID related to the pressed toggle
            $('input[type="checkbox"][id=' + id + ']').prop('checked', previousState).change(); // restore previous toggle state previously saved
            closedPressed = true; // change system state accordingly
            $('[data-toggle="popover"]').popover('hide'); // hide the popover
        }
    });

    for (let i = 0; i < $('[data-toggle="popover"]').length; i++) { // for each toggle in the page
        let id = $('[data-toggle="popover"]')[i].id; // retrieve studentID related to the toggle
        $('[data-toggle="popover"][id=' + id + ']').on('hide.bs.popover', function () { // when the event about hiding its popover is fired
            if (id == toggleID && !closedPressed && timeChanged && togglePressed) { // if the toggle previously pressed was its own, if there was no x icon clicked, if the user correctly
                                                                                    // inserted time information and if the toggle was pressed before the event
                let tooltip = document.createElement('a'); // create a tooltip icon
                tooltip.setAttribute('data-toggle', 'tooltip');
                tooltip.setAttribute('data-placement', 'right');
                let time = $('input[type="time"][id=' + id + ']')[0].value; // set tooltip text to be shown
                let studentName = $('td#' + id)[0].innerHTML; // set tooltip text to be shown
                let enterExitVerb;
                if ($('[data-toggle="popover"]')[i].children[0].classList.contains('btn-success')) { // if the toggle was pressed to change student state from absent to late entry
                    enterExitVerb = "entered"; // set tooltip text to be shown
                    students_ids['late'].push({"id": id, "time": time}); // add studentID in late array together with time information
                } else { // if the toggle was pressed to change student state from present to early exit
                    enterExitVerb = "exited"; // set tooltip text to be shown
                    students_ids['early'].push({"id": id, "time": time}); // add studentID in early array together with time information
                }
                tooltip.setAttribute('title', '' + studentName + ' ' + enterExitVerb + ' class at ' + time);
                let infoIcon = document.createElement('i');
                infoIcon.classList = "fa fa-info-circle";
                let infoButton = document.createElement('button').appendChild(infoIcon);
                tooltip.appendChild(infoButton);

                this.parentElement.appendChild(tooltip);
                this.setAttribute('toggled', 'true'); // save the information about toggle state being changed

                $('#submit-attendances').prop("disabled", false); // enable "Send data" button

                $('[data-toggle="tooltip"]').tooltip( // all mouse hovers on info icon trigger a tooltip
                    {
                        container: 'body', // responsive when window is resizing
                    }
                );

                $('[data-toggle="popover"][id=' + id + ']').popover('disable'); // disable popover on the toggle, so that if the user clicks again on the toggle
                                                                                // it will simply return in original state (see later lines 189+)
                togglePressed = timeChanged = closedPressed = false; // restore initial values for system state
                toggleID = -1;
            } else if (closedPressed == true) { // if the user fired the popover hide event by clicking on x icon in the top right corner of the popover
                togglePressed = timeChanged = closedPressed = false; // restore initial values for system state
                toggleID = -1;
            }
        });
    }
}

      $(document).ready(function () {
          var today = new Date();
          var lecture_date = new Date("<%= @lecture.date.split('/').reverse.join('-') %>");

          if(today > new Date(lecture_date.getTime() + 86400000) || today < new Date(lecture_date.getTime() - 86400000)) {
              disable_clickable()

              $('textarea[id="lecture_topics"]')[0].onkeyup = function () {
                  if ($('textarea[id="lecture_topics"]')[0].value.length == 0) {
                      $('[data-disable-with="Update Topics"]')[0].classList.add('disabled')
                      document.getElementById('submit-topics-edit').disabled = true;
                  } else {
                      $('[data-disable-with="Update Topics"]')[0].classList.remove('disabled')
                      document.getElementById('submit-topics-edit').disabled = false;
                  }
              };

              if( $('[data-toggle="toggle"]:not(.disabled)').length == 0 ) {
                  try {
                      $('[data-toggle="popover"].disabled').popover( // all clicks on toggle elements don't trigger the creation of a popover
                          'disable'
                      );
                  } catch (e) {
                      location.reload(); // in order to show disalbled toggles you have to reaload the page
                  }
              }
          }
      });
      function disable_clickable() {
          $('a:not(#back-to-teacher, .nav-link)').addClass('disabled');
          $('a:not(#back-to-teacher, .nav-link)').prop('disabled', true);
          $('input, .toggle').prop('disabled', true);
          $('input, .toggle').addClass('disabled');
      }

      function update_attendances(){ // send data about attendances changes
          $.ajax({
              type: 'POST',
              url: "/lectures/<%= @lecture.id %>/attendances",
              data: { "school_class_id": "<%= @lecture.school_class_id %>", "students_ids": students_ids},
              success: function (data) {
                  console.log(data);
              }
          })
      }

      $(document).on('keyup', '#topics-edit textarea', function () {
          $('input[type=submit]').prop('disabled', false);
      });
      $('form#topics-edit input[type=submit]').click( function () {
          $(this).prop("disabled", true);
          $('form#topics-edit').submit();
      });

</script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
<script onload="execute()" src="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">